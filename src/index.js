// config
let AUX_NODE_DATA
let MAX_PASSES

function register (cytoscape) {
  cytoscape('core', 'edgeConnections', edgeConnections)
  cytoscape('core', 'addEdge', addEdge)
  cytoscape('core', 'addEdges', addEdges)
  cytoscape('collection', 'auxNode', auxNode)
  cytoscape('collection', 'isAuxNode', isAuxNode)
  cytoscape('collection', 'edgeId', edgeId)
};

// expose to global cytoscape (i.e. window.cytoscape)
if (typeof cytoscape !== 'undefined') {
  register(cytoscape)
}

module.exports = register

function edgeConnections (config = {}) {
  // config
  AUX_NODE_DATA = config.auxNodeData  || (edge => ({}))
  MAX_PASSES    = config.maxPasses    || 10
  // Note: eventHandlers operates on config
  eventHandlers(this)
}

/**
 * @param   edge    Cytoscape edge (POJO); source and target IDs may refer to another edge
 */
function addEdge (edge) {
  if (!_addEdge(edge, this)) {
    console.warn('Edge can\'t be added to graph as a player does not exist', edge)
  }
}

/**
 * @param   edges   array of Cytoscape edge (POJO); source and target IDs may refer to another edge
 */
function addEdges (edges) {
  let pass = 0
  do {
    edges = edges.filter(edge => !_addEdge(edge, this))
    if (++pass === MAX_PASSES) {
      throw Error(`too many add-edges passes (limit is ${MAX_PASSES})`)
    }
  } while (edges.length)
  console.log(`This graph needed ${pass} add-edges passes`)
}

/**
 * @param   edge    Cytoscape edge (POJO).
 *                  Source and target IDs may refer to another edge.
 *                  Source and target IDs may be strings or numbers.
 */
function _addEdge (edge, cy) {
  if (resolve(edge, 'source', cy) && resolve(edge, 'target', cy)) {
    createAuxNode(cy, cy.add(edge))
    return true
  }
}

/**
 * Resolves an edge end. Manipulates the edge in-place.
 *
 * @param     edge    Note: for the edge's source/target IDs both ist supported, string or number
 * @param     end     the end to resolve: 'source' or 'target' (string)
 *
 * @return    true if the edge end could be resolved
 */
function resolve (edge, end, cy) {
  const id = edge.data[end]
  const ele = cy.getElementById(id.toString())
  if (ele.empty()) {
    return false
  }
  if (ele.isEdge()) {
    edge.data[end] = _auxNodeId(ele)
  }
  return true
}

/**
 * Creates and adds an aux node that represents the given edge.
 */
function createAuxNode (cy, edge) {
  const p1 = edge.source().position()
  const p2 = edge.target().position()
  const auxNode = cy.add({
    // FIXME: use edge.midpoint() but midpoint is undefined immediately after add()
    // https://github.com/cytoscape/cytoscape.js/issues/2250
    position: {
      x: (p1.x + p2.x) / 2,
      y: (p1.y + p2.y) / 2
    },
    // Note: the aux node ID (string) is generated by Cytoscape.
    // Aux nodes are recognized by having "edgeId" data.
    data: {
      edgeId: eleId(edge),                // set aux node->edge ref
      ...AUX_NODE_DATA(edge)
    }
  }).lock()
  edge.data('auxNodeId', auxNode.id())    // set edge->aux node ref
}

function eventHandlers (cy) {
  // Note: for edge connecting edges aux node position changes must cascade.
  // So the position event selector must capture both aux nodes and regular nodes.
  // FIXME: also the edge handler node is captured, but should not be a problem.
  cy.on('position', 'node', e => repositionAuxNodes(e.target))
  cy.on('remove', 'edge', e => removeAuxNode(e.target))    // remove aux node when removing edge
}

function repositionAuxNodes (node) {
  node.connectedEdges().forEach(edge => {
    const auxNode = edge.auxNode()
    if (auxNode) {
      const midpoint = edge.midpoint()
      // Note: if Cytoscape can't draw the edge (a warning appears in the browser console) its midpoint is undefined
      // (x and y are NaN). If a node is positioned to such an invalid position its canvas representation becomes
      // corrupt (drawImage() throws "InvalidStateError: The object is in an invalid state" then).
      if (isValidPos(midpoint)) {
        auxNode.unlock().position(midpoint).lock()
      }
    }
  })
}

function removeAuxNode (edge) {
  const auxNode = edge.auxNode()
  auxNode && auxNode.remove()
}

/**
 * Returns the edge's aux node.
 *
 * Prerequisite: "this" refers to an edge.
 *
 * @throws  Error   if called on an object that is not an edge.
 * @throws  Error   in case of data inconsistency (edge has "auxNodeId" data but the referred node is not in the graph).
 *
 * @return  the edge's aux node (one-element Cytoscape collection); `undefined` if the edge has no aux node.
 */
function auxNode () {
  const edge = this
  if (!edge || !edge.isEdge()) {
    console.warn('auxNode() is called on', edge)
    throw Error('auxNode() is not called on an edge')
  }
  const auxNodeId = _auxNodeIdIfAvailable(edge)
  if (!auxNodeId) {
    return
  }
  const auxNode = edge.cy().getElementById(auxNodeId)
  if (auxNode.empty()) {
    console.warn('Data inconsistency: aux node of edge', edge, 'not in graph, auxNodeId', auxNodeId)
    throw Error(`data inconsistency: aux node of edge ${edge.id()} not in graph`)
  }
  return auxNode
}

/**
 * @throws  Error   if the edge has no "auxNodeId" data.
 *
 * @return  the aux node ID (string) of the given edge.
 */
function _auxNodeId (edge) {
  const auxNodeId = _auxNodeIdIfAvailable(edge)
  if (!auxNodeId) {
    console.warn('Edge has no "auxNodeId" data', edge)
    throw Error(`edge ${edge.id()} has no "auxNodeId" data`)
  }
  return auxNodeId
}

/**
 * @return  the aux node ID (string) of the given edge; `undefined` if the edge has no "auxNodeId" data.
 */
function _auxNodeIdIfAvailable (edge) {
  return edge.data('auxNodeId')
}

/**
 * Prerequisite: "this" refers to a node.
 *
 * @return  true if the node is an aux node, false otherwise.
 */
function isAuxNode () {
  return this.edgeId() !== undefined
}

/**
 * Returns the aux node's edge ID.
 *
 * Prerequisite: "this" refers to a node.
 *
 * @throws  Error   if called on an object that is not a node.
 *
 * @return  the aux node's edge ID; `undefined` if this is not an aux node.
 */
function edgeId () {
  const node = this
  if (!node || !node.isNode()) {
    console.warn('edgeId() is called on', node)
    throw Error('edgeId() is not called on a node')
  }
  return node.data('edgeId')
}

// TODO: rethink
function eleId (ele) {
  // Note: Cytoscape element IDs are strings
  return Number(ele.id())
}

function isValidPos(pos) {
  // Global isNan() coerces to number and then checks; Number.isNaN() checks immediately.
  return !(Number.isNaN(pos.x) || Number.isNaN(pos.y))
}
