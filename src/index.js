const ROUND_LIMIT = 10

let events = false    // tracks event handler registration ### TODO: drop it

function register (cytoscape) {
  // TODO: can this happen? Drop it?
  if (!cytoscape) {
    console.warn('Can\'t register cytoscape-edge-connections; Cytoscape not available')
    return
  }
  // register extensions
  cytoscape('core', 'addEdge', addEdge)
  cytoscape('core', 'addEdges', addEdges)
  cytoscape('collection', 'auxNode', auxNode)
  cytoscape('collection', 'isAuxNode', isAuxNode)
  cytoscape('collection', 'edgeId', edgeId)
};

// expose to global cytoscape (i.e. window.cytoscape)
if (typeof cytoscape !== 'undefined') {
  register(cytoscape)
}

module.exports = register

/**
 * @param   edge    Cytoscape edge (POJO); source and target IDs may refer to another edge
 */
function addEdge (edge) {
  eventHandlers(this)   // TODO: move to "init" call
  if (!_addEdge(edge, this)) {
    throw Error(`edge can't be added to graph as a player does not exist ${JSON.stringify(assoc)}`)
  }
}

/**
 * @param   edges   array of Cytoscape edge (POJO); source and target IDs may refer to another edge
 */
function addEdges (edges) {
  eventHandlers(this)   // TODO: move to "init" call
  let rounds = 0
  do {
    edges = edges.filter(edge => !_addEdge(edge, this))
    if (++rounds === ROUND_LIMIT) {
      throw Error(`too many add-edges rounds (limit is ${ROUND_LIMIT})`)
    }
  } while (edges.length)
  console.log(`${rounds} add-edges rounds`)
}

/**
 * @param   edge    Cytoscape edge (POJO).
 *                  Source and target IDs may refer to another edge.
 *                  Source and target IDs may be strings or numbers.
 */
function _addEdge (edge, cy) {
  if (resolve(edge, 'source', cy) && resolve(edge, 'target', cy)) {
    createAuxNode(cy, cy.add(edge))
    return true
  }
}

/**
 * Resolves an edge end. The edge is manipulated in-place.
 *
 * @param     edge    Note: for the edge's source/target IDs both ist supported, string or number
 * @param     end     the end to resolve: 'source' or 'target' (string)
 *
 * @return    true if the edge end could be resolved
 */
function resolve (edge, end, cy) {
  const id = edge.data[end]
  const ele = cy.getElementById(id.toString())
  if (ele.empty()) {
    return false
  }
  if (ele.isEdge()) {
    edge.data[end] = auxNodeId(ele)
  }
  return true
}

/**
 * Creates and adds aux node to represent the given edge.
 */
function createAuxNode (cy, edge) {
  const p1 = edge.source().position()
  const p2 = edge.target().position()
  const auxNode = cy.add({
    // Note: the aux node ID is generated by Cytoscape (string).
    // Aux nodes are recognized by having "edgeId" data.
    data: {
      edgeId: eleId(edge),                // holds original edge ID
      color: edge.data('color')           // TODO: add "auxNodeData" config
    },
    position: {
      x: (p1.x + p2.x) / 2,
      y: (p1.y + p2.y) / 2
    }
  })
  edge.data('auxNodeId', auxNode.id())    // set back link; auxNodeId is of type string
}

function eventHandlers (cy) {
  if (!events) {
    // Note: for edge connecting edges aux node position changes must cascade.
    // So the position event selector must capture both aux nodes and regular nodes.
    // FIXME: also the edge handler node is captured, but should not be a problem.
    cy.on('position', 'node', e => repositionAuxNodes(e.target))
    // remove aux node when removing edge
    cy.on('remove', 'edge[color]', e => removeAuxNode(e.target))    // TODO: add selector config
    events = true
  }
}

function repositionAuxNodes (node) {
  node.connectedEdges('edge[color]').forEach(edge => {    // TODO: add `edgeSelector` config, default: 'edge'
    const midpoint = edge.midpoint()
    // Note: if Cytoscape can't draw the edge (a warning appears in the browser console) its midpoint is undefined
    // (x and y are NaN). If a node is positioned to such an invalid position its canvas representation becomes corrupt
    // (drawImage() throws "InvalidStateError: The object is in an invalid state" then).
    if (isValidPos(midpoint)) {
      edge.auxNode().position(midpoint)
    }
  })
}

function removeAuxNode (edge) {
  edge.auxNode().remove()
}

/**
 * Prerequisite: "this" refers to an edge.
 *
 * @return  the aux node (a one-element Cytoscape collection) that represents the given edge.
 */
function auxNode () {
  const edge = this
  if (!edge || !edge.isEdge()) {
    throw Error(`auxNode() is expected to be called on an edge, but called on ${JSON.stringify(edge)}`)
  }
  const auxNode = edge.cy().getElementById(auxNodeId(edge))
  if (auxNode.size() !== 1) {
    throw Error(`no aux node for edge ${edge.id()}`)
  }
  return auxNode
}

/**
 * @return  the ID (string) of the aux node of the given edge.
 */
function auxNodeId (edge) {
  const auxNodeId = edge.data('auxNodeId')
  if (!auxNodeId) {
    throw Error(`edge ${edge.id()} has no "auxNodeId" data`)
  }
  return auxNodeId
}

/**
 * Prerequisite: "this" refers to a node.
 *
 * @return  true if the node is an aux node, false otherwise.
 */
function isAuxNode () {
  return this.edgeId() !== undefined
}

/**
 * Prerequisite: "this" refers to a node.
 *
 * @return  the ID of the edge represented by this aux node.
 *          Returns `undefined` if this is not an aux node (TODO: throw instead?).
 */
function edgeId () {
  const node = this
  if (!node || !node.isNode()) {
    throw Error(`edgeId() is expected to be called on a node, but called on ${JSON.stringify(node)}`)
  }
  return node.data('edgeId')
}

function eleId (ele) {
  // Note: Cytoscape element IDs are strings
  return Number(ele.id())
}

function isValidPos(pos) {
  // Global isNan() coerces to number and then checks; Number.isNaN() checks immediately.
  return !(Number.isNaN(pos.x) || Number.isNaN(pos.y))
}
