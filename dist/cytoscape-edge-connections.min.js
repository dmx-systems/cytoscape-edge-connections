!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.cytoscapeEdgeConnections=n():e.cytoscapeEdgeConnections=n()}(window,function(){return function(e){var n={};function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)o.d(t,r,function(n){return e[n]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n){let o,t=10;function r(e){e("core","edgeConnections",d)}function d(e={}){return o=this,e.maxPasses&&(t=e.maxPasses),o.style().selector("node.aux-node").style({"background-color":u}),o.on("position","node",e=>(function(e){e.connectedEdges().forEach(e=>{const n=f(e);if(n){const o=e.midpoint();(function(e){return!(isNaN(e.x)||isNaN(e.y))})(o)&&n.unlock().position(o).lock()}})})(e.target)),o.on("remove","edge",e=>(function(e){const n=f(e);n&&n.remove()})(e.target)),o.on("style","edge",e=>o.style().update()),{addEdge:i,addEdges:a,auxNode:f,isAuxNode:g,edgeId:y,edge:p}}function i(e){c(e)||console.warn("Edge can't be added to graph as a player does not exist",e)}function a(e){let n=0;do{if(e=e.filter(e=>!c(e)),++n===t)throw Error(`too many add-edges passes (limit is ${t})`)}while(e.length);console.log(`This graph needed ${n} add-edges passes`)}function c(e){if(s(e,"source")&&s(e,"target"))return function(e){const n=e.source().position(),t=e.target().position(),r=o.add({position:{x:(n.x+t.x)/2,y:(n.y+t.y)/2},data:{edgeId:e.id()},classes:"aux-node"}).lock();e.scratch("edgeConnections",{auxNodeId:r.id()})}(o.add(e)),!0}function s(e,n){const t=e.data[n],r=o.getElementById(t.toString());return!r.empty()&&(r.isEdge()&&(e.data[n]=function(e){const n=l(e);if(!n)throw console.warn('Edge has no "auxNodeId" data',e),Error(`edge ${e.id()} has no "auxNodeId" data`);return n}(r)),!0)}function u(e){const n=p(e);return n?n.style("line-color"):"white"}function f(e){if(!e||!e.isEdge())throw console.warn("auxNode() is called on",e),Error("auxNode() is not called on an edge");const n=l(e);if(!n)return;const o=e.cy().getElementById(n);if(o.empty())throw console.warn("Data inconsistency: aux node of edge",e,"not in graph, auxNodeId",n),Error(`data inconsistency: aux node of edge ${e.id()} not in graph`);return o}function l(e){const n=e.scratch("edgeConnections");return n&&n.auxNodeId}function g(e){return void 0!==y(e)}function p(e){const n=y(e);if(!n)throw console.warn("Not an aux node:",e),Error("arg passed to edge() is not an aux node");const t=o.getElementById(n);if(!t.empty())return t}function y(e){if(!e||!e.isNode())throw console.warn("edgeId() is called on",e),Error("edgeId() is not called on a node");return e.data("edgeId")}e.exports=r,"undefined"!=typeof cytoscape&&r(cytoscape)}])});