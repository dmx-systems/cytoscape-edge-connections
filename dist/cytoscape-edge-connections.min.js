!function(e,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.cytoscapeEdgeConnections=o():e.cytoscapeEdgeConnections=o()}(window,function(){return function(e){var o={};function n(t){if(o[t])return o[t].exports;var r=o[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var r in e)n.d(t,r,function(o){return e[o]}.bind(null,r));return t},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=0)}([function(e,o){let n=e=>({}),t=10;function r(e){e("core","edgeConnections",d),e("core","addEdge",i),e("core","addEdges",a),e("collection","auxNode",u),e("collection","isAuxNode",l),e("collection","edgeId",p)}function d(e={}){var o;e.auxNodeData&&(n=e.auxNodeData),e.maxPasses&&(t=e.maxPasses),(o=this).on("position","node",e=>(function(e){e.connectedEdges().forEach(e=>{const o=e.auxNode();if(o){const n=e.midpoint();(function(e){return!(Number.isNaN(e.x)||Number.isNaN(e.y))})(n)&&o.unlock().position(n).lock()}})})(e.target)),o.on("remove","edge",e=>(function(e){const o=e.auxNode();o&&o.remove()})(e.target))}function i(e){c(e,this)||console.warn("Edge can't be added to graph as a player does not exist",e)}function a(e){let o=0;do{if(e=e.filter(e=>!c(e,this)),++o===t)throw Error(`too many add-edges passes (limit is ${t})`)}while(e.length);console.log(`This graph needed ${o} add-edges passes`)}function c(e,o){if(s(e,"source",o)&&s(e,"target",o))return function(e,o){const t=o.source().position(),r=o.target().position(),d=e.add({position:{x:(t.x+r.x)/2,y:(t.y+r.y)/2},data:{edgeId:(i=o,Number(i.id())),...n(o)}}).lock();var i;o.data("auxNodeId",d.id())}(o,o.add(e)),!0}function s(e,o,n){const t=e.data[o],r=n.getElementById(t.toString());return!r.empty()&&(r.isEdge()&&(e.data[o]=function(e){const o=f(e);if(!o)throw console.warn('Edge has no "auxNodeId" data',e),Error(`edge ${e.id()} has no "auxNodeId" data`);return o}(r)),!0)}function u(){const e=this;if(!e||!e.isEdge())throw console.warn("auxNode() is called on",e),Error("auxNode() is not called on an edge");const o=f(e);if(!o)return;const n=e.cy().getElementById(o);if(n.empty())throw console.warn("Data inconsistency: aux node of edge",e,"not in graph, auxNodeId",o),Error(`data inconsistency: aux node of edge ${e.id()} not in graph`);return n}function f(e){return e.data("auxNodeId")}function l(){return void 0!==this.edgeId()}function p(){const e=this;if(!e||!e.isNode())throw console.warn("edgeId() is called on",e),Error("edgeId() is not called on a node");return e.data("edgeId")}"undefined"!=typeof cytoscape&&r(cytoscape),e.exports=r}])});