!function(e,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.cytoscapeEdgeConnections=o():e.cytoscapeEdgeConnections=o()}(window,function(){return function(e){var o={};function t(n){if(o[n])return o[n].exports;var r=o[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,t),r.l=!0,r.exports}return t.m=e,t.c=o,t.d=function(e,o,n){t.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:n})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,o){if(1&o&&(e=t(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(t.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var r in e)t.d(n,r,function(o){return e[o]}.bind(null,r));return n},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},t.p="",t(t.s=0)}([function(e,o){const t=10;let n=!1;function r(e){e?(e("core","addEdge",i),e("core","addEdges",d),e("collection","auxNode",s),e("collection","isAuxNode",l),e("collection","edgeId",p)):console.warn("Can't register cytoscape-edge-connections; Cytoscape not available")}function i(e){if(u(this),!c(e,this))throw Error(`edge can't be added to graph as a player does not exist ${JSON.stringify(assoc)}`)}function d(e){u(this);let o=0;do{if(e=e.filter(e=>!c(e,this)),++o===t)throw Error(`too many add-edges rounds (limit is ${t})`)}while(e.length);console.log(`${o} add-edges rounds`)}function c(e,o){if(a(e,"source",o)&&a(e,"target",o))return function(e,o){const t=o.source().position(),n=o.target().position(),r=e.add({data:{edgeId:(i=o,Number(i.id())),color:o.data("color")},position:{x:(t.x+n.x)/2,y:(t.y+n.y)/2}});var i;o.data("auxNodeId",r.id())}(o,o.add(e)),!0}function a(e,o,t){const n=e.data[o],r=t.getElementById(n.toString());return!r.empty()&&(r.isEdge()&&(e.data[o]=f(r)),!0)}function u(e){n||(e.on("position","node",e=>(function(e){e.connectedEdges("edge[color]").forEach(e=>{const o=e.midpoint();(function(e){return!(Number.isNaN(e.x)||Number.isNaN(e.y))})(o)&&e.auxNode().position(o)})})(e.target)),e.on("remove","edge[color]",e=>(function(e){e.auxNode().remove()})(e.target)),n=!0)}function s(){const e=this;if(!e||!e.isEdge())throw Error(`auxNode() is expected to be called on an edge, but called on ${JSON.stringify(e)}`);const o=e.cy().getElementById(f(e));if(1!==o.size())throw Error(`no aux node for edge ${e.id()}`);return o}function f(e){const o=e.data("auxNodeId");if(!o)throw Error(`edge ${e.id()} has no "auxNodeId" data`);return o}function l(){return void 0!==this.edgeId()}function p(){const e=this;if(!e||!e.isNode())throw Error(`edgeId() is expected to be called on a node, but called on ${JSON.stringify(e)}`);return e.data("edgeId")}"undefined"!=typeof cytoscape&&r(cytoscape),e.exports=r}])});