!function(e,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?exports.cytoscapeEdgeConnections=o():e.cytoscapeEdgeConnections=o()}(window,function(){return function(e){var o={};function n(t){if(o[t])return o[t].exports;var r=o[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=o,n.d=function(e,o,t){n.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:t})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,o){if(1&o&&(e=n(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var r in e)n.d(t,r,function(o){return e[o]}.bind(null,r));return t},n.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(o,"a",o),o},n.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},n.p="",n(n.s=0)}([function(e,o){console.log("cytoscape-edge-connections 2019/06/18");let n,t=10;function r(e){e("core","edgeConnections",d)}function d(e={}){return n=this,e.maxPasses&&(t=e.maxPasses),n.style().selector("node.aux-node").style({"background-color":"data(color)"}),n.on("position","node",e=>(function(e){e.connectedEdges().forEach(f)})(e.target)),n.on("remove","edge",e=>{const o=e.target;!function(e){const o=l(e);o&&o.remove()}(o),s(o)}),n.on("style","edge",e=>(function(e){const o=l(e);o&&o.data("color",e.style("line-color"))})(e.target)),{addEdge:i,addEdges:c,auxNode:l,isAuxNode:p,edgeId:y,edge:x}}function i(e){a(e)||console.warn(`Edge ${e.data.id} not added as source/target not in graph`,e)}function c(e){let o=0;do{if(e=e.filter(e=>!a(e)),++o===t)throw Error(`too many add-edges passes (limit is ${t})`)}while(e.length)}function a(e){if(u(e,"source")&&u(e,"target"))return function(e){const o=e.midpoint(),t=n.add({classes:"aux-node",position:m(o)&&o,data:{edgeId:e.id(),color:e.style("line-color")}}).lock();e.scratch("edgeConnections",{auxNodeId:t.id()}),s(e)}(n.add(e)),!0}function u(e,o){const t=e.data[o],r=n.getElementById(t.toString());return!r.empty()&&(r.isEdge()&&(e.data[o]=function(e){const o=g(e);if(!o)throw console.error('Edge has no "auxNodeId" info',e),Error(`edge ${e.id()} has no "auxNodeId" info`);return o}(r)),!0)}function s(e){e.parallelEdges().forEach(f)}function f(e){const o=l(e);if(o){const n=e.midpoint();m(n)&&o.unlock().position(n).lock()}}function l(e){if(!e||!e.isEdge())throw console.error("Invalid auxNode() argument (edge expected):",e),Error("invalid auxNode() argument");const o=g(e);if(!o)return;const t=n.getElementById(o);if(t.empty())throw console.error("Data inconsistency: aux node of edge",e,"not in graph, auxNodeId",o),Error(`data inconsistency: aux node of edge ${e.id()} not in graph`);return t}function g(e){const o=e.scratch("edgeConnections");return o&&o.auxNodeId}function p(e){return void 0!==y(e)}function y(e){if(!e||!e.isNode())throw console.error("Invalid edgeId() argument (node expected):",e),Error("invalid edgeId() argument");return e.data("edgeId")}function x(e){const o=y(e);if(!o)throw console.error("Invalid edge() argument (aux node expected):",e),Error("invalid edge() argument");const t=n.getElementById(o);if(!t.empty())return t}function m(e){return!(isNaN(e.x)||isNaN(e.y))}e.exports=r,"undefined"!=typeof cytoscape&&r(cytoscape)}])});